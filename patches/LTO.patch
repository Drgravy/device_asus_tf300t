From efcf0c85225a88a6a068cde7e0ac332679695b50 Mon Sep 17 00:00:00 2001
From: untermensch <bobthebastard@gmail.com>
Date: Sat, 10 Nov 2012 09:55:32 -0800
Subject: [PATCH] add lto.dat downloading fix white space errors

Change-Id: I2080362e32784323f12419e323da78affa4013b7

Change-Id: Ida528130029a31551da90742aacb85467aa4ecf3
---
 .../server/location/GpsLocationProvider.java       |   48 ++++-
 .../android/server/location/GpsLtoDownloader.java  |  197 ++++++++++++++++++++
 2 files changed, 244 insertions(+), 1 deletion(-)
 create mode 100644 services/java/com/android/server/location/GpsLtoDownloader.java

diff --git a/services/java/com/android/server/location/GpsLocationProvider.java b/services/java/com/android/server/location/GpsLocationProvider.java
index 17ecb1a..8679a32 100755
--- a/services/java/com/android/server/location/GpsLocationProvider.java
+++ b/services/java/com/android/server/location/GpsLocationProvider.java
@@ -157,6 +157,7 @@ public class GpsLocationProvider implements LocationProviderInterface {
     private static final int ADD_LISTENER = 8;
     private static final int REMOVE_LISTENER = 9;
     private static final int REQUEST_SINGLE_SHOT = 10;
+    private static final int DOWNLOAD_LTO_DATA = 11;
 
     // Request setid
     private static final int AGPS_RIL_REQUEST_SETID_IMSI = 1;
@@ -207,6 +208,7 @@ public class GpsLocationProvider implements LocationProviderInterface {
     // initialized to true so we do NTP and XTRA when the network comes up after booting
     private boolean mInjectNtpTimePending = true;
     private boolean mDownloadXtraDataPending = true;
+    private boolean mDownloadLtoDataPending = true;
 
     // set to true if the GPS engine does not do on-demand NTP time requests
     private boolean mPeriodicTimeInjection;
@@ -281,9 +283,11 @@ public class GpsLocationProvider implements LocationProviderInterface {
     // Alarms
     private final static String ALARM_WAKEUP = "com.android.internal.location.ALARM_WAKEUP";
     private final static String ALARM_TIMEOUT = "com.android.internal.location.ALARM_TIMEOUT";
+    private static final String ALARM_LTO = "com.android.internal.location.ALARM_LTO";
     private final AlarmManager mAlarmManager;
     private final PendingIntent mWakeupIntent;
     private final PendingIntent mTimeoutIntent;
+    private final PendingIntent mLtoIntent;
 
     private final IBatteryStats mBatteryStats;
     private final SparseIntArray mClientUids = new SparseIntArray();
@@ -291,6 +295,7 @@ public class GpsLocationProvider implements LocationProviderInterface {
     // how often to request NTP time, in milliseconds
     // current setting 24 hours
     private static final long NTP_INTERVAL = 24*60*60*1000;
+    private static final long LTO_INTERVAL = 24*60*60*1000;
     // how long to wait if we have a network error in NTP or XTRA downloading
     // current setting - 5 minutes
     private static final long RETRY_INTERVAL = 5*60*1000;
@@ -356,6 +361,9 @@ public class GpsLocationProvider implements LocationProviderInterface {
             } else if (action.equals(ALARM_TIMEOUT)) {
                 if (DEBUG) Log.d(TAG, "ALARM_TIMEOUT");
                 hibernate();
+            } else if (action.equals(ALARM_LTO)) {
+                if (DEBUG) Log.d(TAG, "ALARM_LTO");
+                ltoDownloadRequest();
             } else if (action.equals(Intents.DATA_SMS_RECEIVED_ACTION)) {
                 checkSmsSuplInit(intent);
             } else if (action.equals(Intents.WAP_PUSH_RECEIVED_ACTION)) {
@@ -397,6 +405,7 @@ public class GpsLocationProvider implements LocationProviderInterface {
         mAlarmManager = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
         mWakeupIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ALARM_WAKEUP), 0);
         mTimeoutIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ALARM_TIMEOUT), 0);
+        mLtoIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ALARM_LTO), 0);
 
         IntentFilter intentFilter = new IntentFilter();
         intentFilter.addAction(Intents.DATA_SMS_RECEIVED_ACTION);
@@ -424,7 +433,13 @@ public class GpsLocationProvider implements LocationProviderInterface {
             FileInputStream stream = new FileInputStream(file);
             mProperties.load(stream);
             stream.close();
-
+            String mServer = mProperties.getProperty("LTO_SERVER_1");
+            if (mServer == null) {
+                Log.i(TAG, "LTO download disabled");
+                mDownloadLtoDataPending = false;
+            } else {
+                Log.i(TAG, "LTO download enabled");
+            }
             mSuplServerHost = mProperties.getProperty("SUPL_HOST");
             String portString = mProperties.getProperty("SUPL_PORT");
             if (mSuplServerHost != null && portString != null) {
@@ -466,9 +481,14 @@ public class GpsLocationProvider implements LocationProviderInterface {
         IntentFilter intentFilter = new IntentFilter();
         intentFilter.addAction(ALARM_WAKEUP);
         intentFilter.addAction(ALARM_TIMEOUT);
+        intentFilter.addAction(ALARM_LTO);
         mContext.registerReceiver(mBroadcastReciever, intentFilter);
     }
 
+    private void ltoDownloadRequest() {
+        sendMessage(DOWNLOAD_LTO_DATA, 0, null);
+    }
+
     /**
      * Returns the name of this provider.
      */
@@ -546,6 +566,9 @@ public class GpsLocationProvider implements LocationProviderInterface {
             if (mDownloadXtraDataPending) {
                 sendMessage(DOWNLOAD_XTRA_DATA, 0, null);
             }
+            if (mDownloadLtoDataPending) {
+                sendMessage(DOWNLOAD_LTO_DATA, 0, null);
+            }
         }
     }
 
@@ -616,6 +639,23 @@ public class GpsLocationProvider implements LocationProviderInterface {
         }
     }
 
+    private void handleDownloadLtoData() {
+        long interval = LTO_INTERVAL;
+        if (!mNetworkAvailable) {
+            mDownloadLtoDataPending = true;
+            return;
+        }
+        mDownloadLtoDataPending = false;
+        if (new GpsLtoDownloader(mContext, mProperties).downloadLtoData()) {
+            Log.d(TAG, "Download LTO data success");
+        } else {
+            Log.e(TAG, "Download LTO data failed");
+            interval = RETRY_INTERVAL;
+        }
+        mAlarmManager.cancel(mLtoIntent);
+        mAlarmManager.set(AlarmManager.RTC, interval + System.currentTimeMillis(), mLtoIntent);
+    }
+
     /**
      * This is called to inform us when another location provider returns a location.
      * Someday we might use this for network location injection to aid the GPS
@@ -953,6 +993,9 @@ public class GpsLocationProvider implements LocationProviderInterface {
                 xtraDownloadRequest();
                 result = true;
             }
+        } else if ("force_lto_injection".equals(command)) {
+            ltoDownloadRequest();
+            result = true;
         } else {
             Log.w(TAG, "sendExtraCommand: unknown command " + command);
         }
@@ -1588,6 +1631,9 @@ public class GpsLocationProvider implements LocationProviderInterface {
                         handleDownloadXtraData();
                     }
                     break;
+                case DOWNLOAD_LTO_DATA:
+                    handleDownloadLtoData();
+                    break;
                 case UPDATE_LOCATION:
                     handleUpdateLocation((Location)msg.obj);
                     break;
diff --git a/services/java/com/android/server/location/GpsLtoDownloader.java b/services/java/com/android/server/location/GpsLtoDownloader.java
new file mode 100644
index 0000000..59060f9
--- /dev/null
+++ b/services/java/com/android/server/location/GpsLtoDownloader.java
@@ -0,0 +1,197 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.location;
+
+import android.content.Context;
+import android.net.Proxy;
+import android.net.http.AndroidHttpClient;
+import android.util.Log;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpResponse;
+import org.apache.http.StatusLine;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.conn.params.ConnRouteParams;
+
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.util.Properties;
+import java.util.Random;
+import java.io.File;
+import java.io.FileOutputStream;
+
+/**
+ * A class for downloading GPS LTO data.
+ *
+ * {@hide}
+ */
+public class GpsLtoDownloader {
+
+    private static final String TAG = "GpsLtoDownloader";
+    static final boolean DEBUG = false;
+    private Context mContext;
+    private String[] mLtoServers;
+    // to load balance our server requests
+    private int mNextServerIndex;
+    private static String mLtoFilePath = "/data/gps/lto.dat";
+    private static FileOutputStream mFileOutputStream;
+
+    GpsLtoDownloader(Context context, Properties properties) {
+        mContext = context;
+        String mPath = properties.getProperty("LTO_PATH");
+        if (mPath != null) {
+            mLtoFilePath = mPath;
+        }
+        // read Lto servers from the Properties object
+        int count = 0;
+        String server1 = properties.getProperty("LTO_SERVER_1");
+        String server2 = properties.getProperty("LTO_SERVER_2");
+        String server3 = properties.getProperty("LTO_SERVER_3");
+        if (server1 != null) count++;
+        if (server2 != null) count++;
+        if (server3 != null) count++;
+
+        if (count == 0) {
+            Log.e(TAG, "No LTO servers were specified in the GPS configuration");
+            return;
+        } else {
+            mLtoServers = new String[count];
+            count = 0;
+            if (server1 != null) mLtoServers[count++] = server1;
+            if (server2 != null) mLtoServers[count++] = server2;
+            if (server3 != null) mLtoServers[count++] = server3;
+
+            // randomize first server
+            Random random = new Random();
+            mNextServerIndex = random.nextInt(count);
+        }
+    }
+
+    boolean downloadLtoData() {
+        String proxyHost = Proxy.getHost(mContext);
+        int proxyPort = Proxy.getPort(mContext);
+        boolean useProxy = (proxyHost != null && proxyPort != -1);
+        byte[] result = null;
+        int startIndex = mNextServerIndex;
+
+        if (mLtoFilePath == null) {
+            return false;
+        }
+
+        if (mLtoServers == null) {
+            return false;
+        }
+
+        // load balance our requests among the available servers
+        while (result == null) {
+            result = doDownload(mLtoServers[mNextServerIndex], useProxy, proxyHost, proxyPort);
+            // increment mNextServerIndex and wrap around if necessary
+            mNextServerIndex++;
+            if (mNextServerIndex == mLtoServers.length) {
+                mNextServerIndex = 0;
+            }
+            // break if we have tried all the servers
+            if (mNextServerIndex == startIndex) break;
+        }
+        if (result != null) {
+            return saveDownload(mLtoFilePath, result);
+        } else {
+            return false;
+        }
+    }
+
+    protected static byte[] doDownload(String url, boolean isProxySet,
+            String proxyHost, int proxyPort) {
+        if (DEBUG) Log.d(TAG, "Downloading LTO data from " + url);
+
+        AndroidHttpClient client = null;
+        try {
+            client = AndroidHttpClient.newInstance("Android");
+            HttpUriRequest req = new HttpGet(url);
+
+            if (isProxySet) {
+                HttpHost proxy = new HttpHost(proxyHost, proxyPort);
+                ConnRouteParams.setDefaultProxy(req.getParams(), proxy);
+            }
+
+            req.addHeader(
+                    "Accept",
+                    "*/*, application/vnd.wap.mms-message, application/vnd.wap.sic");
+
+            req.addHeader(
+                    "x-wap-profile",
+                    "http://www.openmobilealliance.org/tech/profiles/UAPROF/ccppschema-20021212#");
+
+            HttpResponse response = client.execute(req);
+            StatusLine status = response.getStatusLine();
+            if (status.getStatusCode() != 200) { // HTTP 200 is success.
+                if (DEBUG) Log.d(TAG, "HTTP error: " + status.getReasonPhrase());
+                return null;
+            }
+
+            HttpEntity entity = response.getEntity();
+            byte[] body = null;
+            if (entity != null) {
+                try {
+                    if (entity.getContentLength() > 0) {
+                        body = new byte[(int) entity.getContentLength()];
+                        DataInputStream dis = new DataInputStream(entity.getContent());
+                        try {
+                            dis.readFully(body);
+                        } finally {
+                            try {
+                                dis.close();
+                            } catch (IOException e) {
+                                Log.e(TAG, "Unexpected IOException.", e);
+                            }
+                        }
+                    }
+                } finally {
+                    if (entity != null) {
+                        entity.consumeContent();
+                    }
+                }
+            }
+            return body;
+        } catch (Exception e) {
+            if (DEBUG) Log.d(TAG, "error " + e);
+        } finally {
+            if (client != null) {
+                client.close();
+            }
+        }
+        return null;
+    }
+
+    private static boolean saveDownload(String path, byte[] data) {
+        try {
+            mFileOutputStream = new FileOutputStream(new File(path));
+            mFileOutputStream.write(data);
+            if (mFileOutputStream != null) {
+                mFileOutputStream.flush();
+                mFileOutputStream.close();
+            }
+            return true;
+        } catch (IOException localIOException) {
+            localIOException.printStackTrace();
+            return false;
+        }
+    }
+}
-- 
1.7.9.5

